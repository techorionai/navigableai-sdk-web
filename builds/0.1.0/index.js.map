{"version":3,"file":"index.js","sources":["index.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass NavigableAI {\n    constructor(options) {\n        this.sharedSecretKeyConfig = undefined;\n        this.identifier = undefined;\n        this.setIdentifier = (identifier) => {\n            this.identifier = identifier;\n            this.localStorage.set(\"identifier\", identifier);\n        };\n        this.getIdentifierFromLocalStorage = () => {\n            const identifier = this.localStorage.get(\"identifier\");\n            if (identifier) {\n                this.identifier = identifier;\n            }\n        };\n        this.chatWindow = {\n            id: undefined,\n            messages: [],\n            defaults: {\n                error: \"An error occurred. Please try again later.\",\n                title: \"Assistant\",\n                logo: `<svg class=\"ai-chat-window-header-logo\" aria-hidden=\"true\"  xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-sparkles\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M16 18a2 2 0 0 1 2 2a2 2 0 0 1 2 -2a2 2 0 0 1 -2 -2a2 2 0 0 1 -2 2zm0 -12a2 2 0 0 1 2 2a2 2 0 0 1 2 -2a2 2 0 0 1 -2 -2a2 2 0 0 1 -2 2zm-7 12a6 6 0 0 1 6 -6a6 6 0 0 1 -6 -6a6 6 0 0 1 -6 6a6 6 0 0 1 6 6z\" /></svg>`,\n                closeIcon: `<svg class=\"ai-chat-window-header-close-icon\" xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-x\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M18 6l-12 12\" /><path d=\"M6 6l12 12\" /></svg>`,\n                sendIcon: `<svg class=\"ai-chat-window-input-send-icon\" xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"currentColor\"  class=\"icon icon-tabler icons-tabler-filled icon-tabler-circle-arrow-up\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M17 3.34a10 10 0 1 1 -14.995 8.984l-.005 -.324l.005 -.324a10 10 0 0 1 14.995 -8.336zm-4.98 3.66l-.163 .01l-.086 .016l-.142 .045l-.113 .054l-.07 .043l-.095 .071l-.058 .054l-4 4l-.083 .094a1 1 0 0 0 1.497 1.32l2.293 -2.293v5.586l.007 .117a1 1 0 0 0 1.993 -.117v-5.585l2.293 2.292l.094 .083a1 1 0 0 0 1.32 -1.497l-4 -4l-.082 -.073l-.089 -.064l-.113 -.062l-.081 -.034l-.113 -.034l-.112 -.02l-.098 -.006z\" /></svg>`,\n                loader: `<div class=\"ai-chat-window-loader\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>`,\n                inputPlaceholder: \"Type your message here...\",\n            },\n            assistantResponding: false,\n            markdown: false,\n            isOpen: () => {\n                const el = this.chatWindow.get();\n                if (!el) {\n                    return false;\n                }\n                return el.style.display === \"block\";\n            },\n            open: (identifier) => {\n                var _a;\n                const el = this.chatWindow.get();\n                if (!el) {\n                    return false;\n                }\n                // Check and set identifier\n                if (identifier && this.identifier !== identifier) {\n                    this.identifier = identifier;\n                    this.api.getMessages.run();\n                }\n                this.chatWindow.set();\n                el.style.display = \"block\";\n                this.chatWindow.scrollToBottom();\n                (_a = this.chatWindow.messageInput.get()) === null || _a === void 0 ? void 0 : _a.focus();\n                return true;\n            },\n            close: () => {\n                var _a;\n                const el = this.chatWindow.get();\n                if (!el) {\n                    return false;\n                }\n                (_a = this.chatWindow.messageInput.get()) === null || _a === void 0 ? void 0 : _a.blur();\n                el.style.display = \"none\";\n                return true;\n            },\n            toggle: () => {\n                if (this.chatWindow.isOpen()) {\n                    return this.chatWindow.close();\n                }\n                else {\n                    return this.chatWindow.open();\n                }\n            },\n            get: () => {\n                if (this.chatWindow.id) {\n                    return document.getElementById(this.chatWindow.id);\n                }\n                return null;\n            },\n            set: () => {\n                var _a;\n                const el = this.chatWindow.get();\n                if (!el) {\n                    return false;\n                }\n                el.classList.add(\"ai-chat-window\");\n                el.innerHTML = `\r\n      <div class=\"ai-chat-window-container\">\r\n        <div class=\"ai-chat-window-header\">\r\n          <div class=\"ai-chat-window-header-left\">\r\n            ${this.chatWindow.defaults.logo}\r\n            <h2 class=\"ai-chat-window-title\" aria-label=\"${this.chatWindow.defaults.title}\">${this.chatWindow.defaults.title}</h2>\r\n          </div>\r\n          <div class=\"ai-chat-window-header-right\">\r\n            <button class=\"ai-chat-window-header-close\" aria-label=\"Close\">\r\n              ${this.chatWindow.defaults.closeIcon}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"ai-chat-window-messages\">\r\n          ${this.chatWindow.messages\n                    .map((message) => {\n                    const shouldRenderMarkdown = this.chatWindow.markdown &&\n                        this.showdown.converter &&\n                        message.sender === \"ASSISTANT\";\n                    const content = shouldRenderMarkdown\n                        ? this.showdown.converter.makeHtml(message.content)\n                        : message.content;\n                    const messageStyle = shouldRenderMarkdown\n                        ? \"\"\n                        : \"white-space: pre-wrap\";\n                    return `\r\n          <div class=\"ai-chat-window-message ${`ai-chat-window-message-${message.sender.toLowerCase()}`}\">\r\n            ${message.sender === \"USER\" || message.sender === \"ASSISTANT\"\n                        ? `<div aria-label=\"${message.sender} ${message.content}\" style=\"${messageStyle}\">${content}${message.action\n                            ? this.actions[message.action]\n                                ? `<br/><button class=\"ai-chat-window-message-action\" aria-label=\"${message.action}\" data-ai-chat-window-message-action=\"${message.action}\">${message.action}</button>`\n                                : \"\"\n                            : \"\"} </div>`\n                        : message.sender === \"ASSISTANT-LOADING\"\n                            ? this.chatWindow.defaults.loader\n                            : `<p aria-label=\"${message.sender} ${message.content}\">${this.chatWindow.defaults.error}</p>`}   \r\n          </div>\r\n          `;\n                })\n                    .join(\"\")}\r\n        </div>\r\n        <div class=\"ai-chat-window-input-section\">\r\n          <form id=\"ai-chat-window-input-form\">\r\n            <div class=\"ai-chat-window-input-section-container\">\r\n              <textarea \r\n                type=\"text\" \r\n                class=\"ai-chat-window-input-field\"\r\n                name=\"message\"\r\n                aria-label=\"Type your message here...\"\r\n                placeholder=\"${this.chatWindow.defaults.inputPlaceholder}\"\r\n                ${this.chatWindow.assistantResponding ? `disabled=\"true\"` : \"\"} \r\n                rows=\"1\"\r\n                oninput=\"this.style.height = 'auto'; this.style.height = this.scrollHeight + 'px';\"\r\n              ></textarea>\r\n              <button \r\n                class=\"ai-chat-window-input-send\"\r\n                aria-label=\"Send\"\r\n                type=\"submit\"\r\n              >\r\n                ${this.chatWindow.defaults.sendIcon}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>`;\n                this.chatWindow.eventListeners.add();\n                this.chatWindow.scrollToBottom();\n                (_a = this.chatWindow.messageInput.get()) === null || _a === void 0 ? void 0 : _a.focus();\n                return true;\n            },\n            addMessage: (messageData) => {\n                this.chatWindow.messages.push(messageData);\n            },\n            reset: () => {\n                this.chatWindow.messages = [];\n                this.chatWindow.set();\n            },\n            scrollToBottom: () => {\n                const el = this.chatWindow.messagesSection.get();\n                if (!el) {\n                    return null;\n                }\n                el.scrollTop = el.scrollHeight;\n            },\n            eventListeners: {\n                cleanup: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return;\n                    }\n                    const closeButton = this.chatWindow.closeButton.get();\n                    if (closeButton) {\n                        closeButton.removeEventListener(\"click\", this.chatWindow.close);\n                    }\n                    const messageForm = this.chatWindow.messageForm.get();\n                    if (messageForm) {\n                        messageForm.removeEventListener(\"click\", this.chatWindow.messageForm.onsubmit);\n                    }\n                    const messageInput = this.chatWindow.messageInput.get();\n                    if (messageInput) {\n                        messageInput.removeEventListener(\"keydown\", this.chatWindow.messageInput.submitOnEnter);\n                    }\n                    const actionButtons = el.querySelectorAll(\"[data-ai-chat-window-message-action]\");\n                    if (actionButtons) {\n                        actionButtons.forEach((button) => {\n                            const actionName = button.getAttribute(\"data-ai-chat-window-message-action\");\n                            if (actionName && this.actions[actionName]) {\n                                button.removeEventListener(\"click\", () => {\n                                    this.actions[actionName]();\n                                });\n                            }\n                        });\n                    }\n                },\n                add: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return null;\n                    }\n                    this.chatWindow.eventListeners.cleanup();\n                    const closeButton = this.chatWindow.closeButton.get();\n                    if (closeButton) {\n                        closeButton.addEventListener(\"click\", this.chatWindow.close);\n                    }\n                    const messageForm = this.chatWindow.messageForm.get();\n                    if (messageForm) {\n                        messageForm.addEventListener(\"submit\", this.chatWindow.messageForm.onsubmit);\n                    }\n                    const messageInput = this.chatWindow.messageInput.get();\n                    if (messageInput) {\n                        messageInput.addEventListener(\"keydown\", this.chatWindow.messageInput.submitOnEnter);\n                    }\n                    const actionButtons = el.querySelectorAll(\"[data-ai-chat-window-message-action]\");\n                    if (actionButtons) {\n                        actionButtons.forEach((button) => {\n                            const actionName = button.getAttribute(\"data-ai-chat-window-message-action\");\n                            if (actionName && this.actions[actionName]) {\n                                button.addEventListener(\"click\", () => {\n                                    this.actions[actionName]();\n                                });\n                            }\n                        });\n                    }\n                },\n            },\n            messagesSection: {\n                get: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return null;\n                    }\n                    return el.querySelector(\".ai-chat-window-messages\");\n                },\n            },\n            closeButton: {\n                get: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return null;\n                    }\n                    return el.querySelector(\".ai-chat-window-header-close\");\n                },\n            },\n            messageInput: {\n                get: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return null;\n                    }\n                    return el.querySelector(\".ai-chat-window-input-field\");\n                },\n                submitOnEnter: (e) => {\n                    if (e.key === \"Enter\") {\n                        e.preventDefault();\n                        this.chatWindow.messageForm.onsubmit();\n                    }\n                },\n            },\n            messageForm: {\n                get: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return null;\n                    }\n                    return el.querySelector(\"#ai-chat-window-input-form\");\n                },\n                onsubmit: () => {\n                    const el = this.chatWindow.messageForm.get();\n                    if (!el) {\n                        return null;\n                    }\n                    const input = this.chatWindow.messageInput.get();\n                    if (!input || !input.value.trim().length) {\n                        return null;\n                    }\n                    if (this.chatWindow.assistantResponding) {\n                        return null;\n                    }\n                    this.api.sendMessage.run(input.value);\n                },\n            },\n            theme: {\n                isLight: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return false;\n                    }\n                    return !el.classList.contains(\"ai-chat-window-dark-theme\");\n                },\n                light: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return null;\n                    }\n                    el.classList.remove(\"ai-chat-window-dark-theme\");\n                },\n                dark: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return null;\n                    }\n                    el.classList.add(\"ai-chat-window-dark-theme\");\n                },\n                toggle: () => {\n                    const isLight = this.chatWindow.theme.isLight();\n                    if (isLight) {\n                        this.chatWindow.theme.dark();\n                    }\n                    else {\n                        this.chatWindow.theme.light();\n                    }\n                },\n            },\n        };\n        this.agentFunctionCall = (toolCall) => __awaiter(this, void 0, void 0, function* () {\n            const functionName = toolCall.function.name;\n            const args = toolCall.function.arguments;\n            if (!this.agentFunctions[functionName]) {\n                this.console.error(\"Function not found: \" + functionName);\n                return;\n            }\n            try {\n                const parsedArgs = JSON.parse(args);\n                const result = yield this.agentFunctions[functionName](parsedArgs);\n                if (typeof result === \"string\") {\n                    this.api.sendMessage.run(result, {\n                        functionCallId: toolCall.id,\n                    });\n                }\n                else if (typeof result === \"boolean\") {\n                    this.api.sendMessage.run(result.toString(), {\n                        functionCallId: toolCall.id,\n                    });\n                }\n                else {\n                    throw new Error(\"Function Response must be a string or boolean\");\n                }\n            }\n            catch (error) {\n                this.console.error(error);\n                if (error instanceof Error) {\n                    this.api.sendMessage.run(error.message, {\n                        functionCallId: toolCall.id,\n                    });\n                }\n                else {\n                    this.api.sendMessage.run(\"Error: An unknown error occurred\", {\n                        functionCallId: toolCall.id,\n                    });\n                }\n            }\n        });\n        this.api = {\n            sendMessage: {\n                run: (message, options) => __awaiter(this, void 0, void 0, function* () {\n                    if (!message) {\n                        throw new Error(\"Message is required\");\n                    }\n                    this.chatWindow.assistantResponding = true;\n                    this.chatWindow.addMessage({\n                        sender: \"USER\",\n                        content: message,\n                        new: false,\n                        createdAt: new Date(),\n                        action: null,\n                    });\n                    this.chatWindow.addMessage({\n                        sender: \"ASSISTANT-LOADING\",\n                        content: \"\",\n                        new: false,\n                        createdAt: new Date(),\n                        action: null,\n                    });\n                    this.chatWindow.set();\n                    const body = {\n                        message,\n                    };\n                    if (this.identifier) {\n                        body.identifier = this.identifier;\n                    }\n                    if (this.chatWindow.markdown && this.showdown.converter) {\n                        body.markdown = true;\n                    }\n                    const configuredActions = Object.keys(this.actions);\n                    if (configuredActions.length) {\n                        body.configuredActions = configuredActions;\n                    }\n                    const configuredFunctions = Object.keys(this.agentFunctions);\n                    if (configuredFunctions.length) {\n                        body.configuredFunctions = configuredFunctions;\n                    }\n                    const res = yield this.api.sendMessage.request(message, body);\n                    this.chatWindow.assistantResponding = false;\n                    this.chatWindow.messages.pop();\n                    if (!res || !res.data || !res.data.data) {\n                        this.console.error(\"Failed to send message.\");\n                        this.chatWindow.addMessage({\n                            sender: \"ERROR\",\n                            content: this.chatWindow.defaults.error,\n                            new: false,\n                            createdAt: new Date(),\n                            action: null,\n                        });\n                        this.chatWindow.set();\n                        return null;\n                    }\n                    const data = res.data;\n                    this.chatWindow.addMessage({\n                        sender: \"ASSISTANT\",\n                        content: data.data.assistantMessage,\n                        new: false,\n                        createdAt: new Date(),\n                        action: data.data.action,\n                    });\n                    this.chatWindow.set();\n                    if (data.data.identifier && this.identifier !== data.data.identifier) {\n                        this.identifier = data.data.identifier;\n                        this.localStorage.set(\"identifier\", this.identifier);\n                    }\n                    if (data.data.action &&\n                        this.actions[data.data.action] &&\n                        this.autoRunActions) {\n                        this.actions[data.data.action]();\n                    }\n                    if (data.data.toolCalls && data.data.toolCalls.length > 0) {\n                        data.data.toolCalls.forEach((toolCall) => {\n                            this.agentFunctionCall(toolCall);\n                        });\n                    }\n                    return data.data;\n                }),\n                request: (message_1, ...args_1) => __awaiter(this, [message_1, ...args_1], void 0, function* (message, body = {}) {\n                    return yield this.request({\n                        method: this.api.sendMessage.method,\n                        url: this.api.sendMessage.url,\n                        body,\n                        signaturePayload: message,\n                    });\n                }),\n                method: \"POST\",\n                url: \"\",\n            },\n            getMessages: {\n                run: () => __awaiter(this, void 0, void 0, function* () {\n                    if (!this.identifier) {\n                        return [];\n                    }\n                    const res = yield this.api.getMessages.request(this.identifier);\n                    if (!res || !res.data || !res.data.data) {\n                        this.console.error(`Failed to get messages for identifier ${this.identifier}.`);\n                        return null;\n                    }\n                    const data = res.data;\n                    this.chatWindow.messages = data.data;\n                    this.chatWindow.set();\n                    return data.data;\n                }),\n                request: (identifier) => {\n                    return this.request({\n                        method: this.api.getMessages.method,\n                        url: `${this.api.getMessages.url}?identifier=${identifier}`,\n                        signaturePayload: identifier,\n                    });\n                },\n                method: \"GET\",\n                url: \"\",\n            },\n        };\n        this.autoRunActions = false;\n        /**\n         * Navigation actions to be suggested by the assistant.\n         */\n        this.actions = {};\n        /**\n         * Functions that can be automated through the assistant. The function should return a string with a status message or simply true for success and false for error.\n         */\n        this.agentFunctions = {};\n        this.arrayBufferToHex = (buffer) => __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => {\n                const hex = Array.from(new Uint8Array(buffer))\n                    .map((byte) => byte.toString(16).padStart(2, \"0\"))\n                    .join(\"\");\n                resolve(hex);\n            });\n        });\n        this.generateSignature = (payload) => __awaiter(this, void 0, void 0, function* () {\n            if (!this.sharedSecretKeyConfig) {\n                this.console.error(\"sharedSecretKeyConfig is not set. Please set sharedSecretKeyConfig while initializing NavigableAI.\");\n                return null;\n            }\n            try {\n                const encoder = new TextEncoder();\n                const keyBuffer = encoder.encode(this.sharedSecretKeyConfig.sharedSecretKey);\n                const payloadBuffer = encoder.encode(payload);\n                const key = yield crypto.subtle.importKey(\"raw\", keyBuffer, { name: \"HMAC\", hash: \"SHA-256\" }, false, [\"sign\"]);\n                const signature = yield crypto.subtle.sign(\"HMAC\", key, payloadBuffer);\n                return yield this.arrayBufferToHex(signature);\n            }\n            catch (error) {\n                this.console.error(\"Error generating signature:\", error);\n                return null;\n            }\n        });\n        this.request = (config) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                let url = config.url;\n                const headers = Object.assign({ \"Content-Type\": \"application/json\" }, config.headers);\n                const body = Object.assign({}, config.body);\n                if (this.sharedSecretKeyConfig &&\n                    this.sharedSecretKeyConfig.sharedSecretKey &&\n                    this.sharedSecretKeyConfig.placement &&\n                    this.sharedSecretKeyConfig.key &&\n                    config.signaturePayload) {\n                    const signature = yield this.generateSignature(config.signaturePayload);\n                    if (!signature) {\n                        throw new Error(\"Failed to generate signature\");\n                    }\n                    if (this.sharedSecretKeyConfig.placement === \"query\") {\n                        url += `?${this.sharedSecretKeyConfig.key}=${signature}`;\n                    }\n                    else if (this.sharedSecretKeyConfig.placement === \"header\") {\n                        headers[this.sharedSecretKeyConfig.key] = signature;\n                    }\n                    else {\n                        throw new Error(`Invalid placement for shared secret key. Placement must be 'query', 'header', or 'body'. Found: ${this.sharedSecretKeyConfig.placement}`);\n                    }\n                }\n                const res = yield fetch(url, {\n                    method: config.method,\n                    headers,\n                    body: [\"OPTIONS\", \"HEAD\", \"GET\", \"DELETE\"].includes(config.method)\n                        ? undefined\n                        : JSON.stringify(body),\n                });\n                const data = yield res.json();\n                return Object.assign(Object.assign({}, res), { data });\n            }\n            catch (error) {\n                this.console.error(`Error in request: ${error}\\nConfig: ${config}`);\n                return null;\n            }\n        });\n        this.console = {\n            log: (...args) => {\n                console.log(\"NavigableAI:\", ...args);\n            },\n            error: (...args) => {\n                console.error(\"NavigableAI:\", ...args);\n            },\n        };\n        this.localStorage = {\n            set: (key, value) => {\n                localStorage.setItem(this.encoder.base64.encode(key), this.encoder.base64.encode(JSON.stringify(value)));\n            },\n            get: (key) => {\n                const value = localStorage.getItem(this.encoder.base64.encode(key));\n                if (!value) {\n                    return null;\n                }\n                return JSON.parse(this.encoder.base64.decode(value));\n            },\n        };\n        this.encoder = {\n            base64: {\n                encode: (str) => {\n                    return btoa(str);\n                },\n                decode: (str) => {\n                    return atob(str);\n                },\n            },\n        };\n        this.showdown = {\n            load: () => {\n                return new Promise((resolve, reject) => {\n                    const script = document.createElement(\"script\");\n                    script.src =\n                        \"https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js\";\n                    script.onload = () => {\n                        this.showdown.converter = new window.showdown.Converter();\n                        resolve(window.showdown);\n                    };\n                    script.onerror = () => reject(new Error(\"Failed to load Showdown\"));\n                    document.head.appendChild(script);\n                });\n            },\n            converter: null,\n        };\n        this.waitForDOM = () => {\n            return new Promise((resolve) => {\n                if (document.readyState === \"complete\") {\n                    resolve(document);\n                }\n                else {\n                    document.addEventListener(\"DOMContentLoaded\", () => {\n                        resolve(document);\n                    });\n                }\n            });\n        };\n        if (!options.id) {\n            this.console.error(\"div with id is required\");\n            return;\n        }\n        (() => __awaiter(this, void 0, void 0, function* () {\n            yield this.waitForDOM();\n            const el = document.getElementById(options.id);\n            if (!el) {\n                this.console.error(\"div not found with id\", options.id);\n                return;\n            }\n            if (options.markdown) {\n                this.chatWindow.markdown = true;\n                this.showdown.load();\n            }\n            this.chatWindow.id = options.id;\n            if (options.sharedSecretKeyConfig) {\n                this.sharedSecretKeyConfig = options.sharedSecretKeyConfig;\n            }\n            if (options.apiConfig) {\n                if (options.apiConfig.sendMessage) {\n                    this.api.sendMessage.url = options.apiConfig.sendMessage.url;\n                    this.api.sendMessage.method = options.apiConfig.sendMessage.method;\n                }\n                if (options.apiConfig.getMessages) {\n                    this.api.getMessages.url = options.apiConfig.getMessages.url;\n                    this.api.getMessages.method = options.apiConfig.getMessages.method;\n                }\n            }\n            if (options.identifier) {\n                if (this.identifier !== options.identifier) {\n                    this.setIdentifier(options.identifier);\n                }\n                else {\n                    this.getIdentifierFromLocalStorage();\n                }\n            }\n            else {\n                this.getIdentifierFromLocalStorage();\n            }\n            if (this.identifier) {\n                this.api.getMessages.run();\n            }\n            if (options.actions) {\n                this.actions = options.actions;\n            }\n            if (options.autoRunActions) {\n                this.autoRunActions = options.autoRunActions;\n            }\n            if (options.agentFunctions) {\n                this.agentFunctions = options.agentFunctions;\n            }\n            if (options.defaults) {\n                if (options.defaults.error) {\n                    this.chatWindow.defaults.error = options.defaults.error;\n                }\n                if (options.defaults.title) {\n                    this.chatWindow.defaults.title = options.defaults.title;\n                }\n                if (options.defaults.inputPlaceholder) {\n                    this.chatWindow.defaults.inputPlaceholder =\n                        options.defaults.inputPlaceholder;\n                }\n                if (options.defaults.logo) {\n                    this.chatWindow.defaults.logo = options.defaults.logo;\n                }\n                if (options.defaults.closeIcon) {\n                    this.chatWindow.defaults.closeIcon = options.defaults.closeIcon;\n                }\n                if (options.defaults.sendIcon) {\n                    this.chatWindow.defaults.sendIcon = options.defaults.sendIcon;\n                }\n                if (options.defaults.loader) {\n                    this.chatWindow.defaults.loader = options.defaults.loader;\n                }\n            }\n            if (options.darkTheme) {\n                this.chatWindow.theme.dark();\n            }\n        }))();\n    }\n}\nexport { NavigableAI };\nif (typeof window !== \"undefined\") {\n    window.NavigableAI = NavigableAI;\n}\n"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","NavigableAI","constructor","options","this","sharedSecretKeyConfig","undefined","identifier","setIdentifier","localStorage","set","getIdentifierFromLocalStorage","get","chatWindow","id","messages","defaults","error","title","logo","closeIcon","sendIcon","loader","inputPlaceholder","assistantResponding","markdown","isOpen","el","style","display","open","_a","api","getMessages","run","scrollToBottom","messageInput","focus","close","blur","toggle","document","getElementById","classList","add","innerHTML","map","message","shouldRenderMarkdown","showdown","converter","sender","content","makeHtml","messageStyle","toLowerCase","action","actions","join","eventListeners","addMessage","messageData","push","reset","messagesSection","scrollTop","scrollHeight","cleanup","closeButton","removeEventListener","messageForm","onsubmit","submitOnEnter","actionButtons","querySelectorAll","forEach","button","actionName","getAttribute","addEventListener","querySelector","key","preventDefault","input","trim","length","sendMessage","theme","isLight","contains","light","remove","dark","agentFunctionCall","toolCall","functionName","function","name","args","arguments","agentFunctions","parsedArgs","JSON","parse","functionCallId","Error","toString","console","new","createdAt","Date","body","configuredActions","Object","keys","configuredFunctions","res","request","pop","data","assistantMessage","autoRunActions","toolCalls","message_1","args_1","method","url","signaturePayload","arrayBufferToHex","buffer","Array","from","Uint8Array","byte","padStart","generateSignature","payload","encoder","TextEncoder","keyBuffer","encode","sharedSecretKey","payloadBuffer","crypto","subtle","importKey","hash","signature","sign","config","headers","assign","placement","fetch","includes","stringify","json","log","setItem","base64","getItem","decode","str","btoa","atob","load","script","createElement","src","onload","window","Converter","onerror","head","appendChild","waitForDOM","readyState","apiConfig","darkTheme"],"mappings":"mPAAA,IAAIA,EAAwC,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,GAAQ,CAAG,MAAOG,GAAKL,EAAOK,GAAO,CAC3F,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,GAAU,CAAC,MAAOG,GAAKL,EAAOK,GAAO,CAC9F,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,EAAO,KAIhBO,KAAKR,EAAWK,EAAY,CAC9GH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,OACtE,GACA,EACA,MAAMO,EACF,WAAAC,CAAYC,GACRC,KAAKC,2BAAwBC,EAC7BF,KAAKG,gBAAaD,EAClBF,KAAKI,cAAiBD,IAClBH,KAAKG,WAAaA,EAClBH,KAAKK,aAAaC,IAAI,aAAcH,EAAW,EAEnDH,KAAKO,8BAAgC,KACjC,MAAMJ,EAAaH,KAAKK,aAAaG,IAAI,cACrCL,IACAH,KAAKG,WAAaA,EACrB,EAELH,KAAKS,WAAa,CACdC,QAAIR,EACJS,SAAU,GACVC,SAAU,CACNC,MAAO,6CACPC,MAAO,YACPC,KAAM,0kBACNC,UAAW,+YACXC,SAAU,orBACVC,OAAQ,mHAKRC,iBAAkB,6BAEtBC,qBAAqB,EACrBC,UAAU,EACVC,OAAQ,KACJ,MAAMC,EAAKvB,KAAKS,WAAWD,MAC3B,QAAKe,GAGuB,UAArBA,EAAGC,MAAMC,OAAmB,EAEvCC,KAAOvB,IACH,IAAIwB,EACJ,MAAMJ,EAAKvB,KAAKS,WAAWD,MAC3B,QAAKe,IAIDpB,GAAcH,KAAKG,aAAeA,IAClCH,KAAKG,WAAaA,EAClBH,KAAK4B,IAAIC,YAAYC,OAEzB9B,KAAKS,WAAWH,MAChBiB,EAAGC,MAAMC,QAAU,QACnBzB,KAAKS,WAAWsB,iBAC8B,QAA7CJ,EAAK3B,KAAKS,WAAWuB,aAAaxB,aAA0B,IAAPmB,GAAyBA,EAAGM,SAC3E,EAAI,EAEfC,MAAO,KACH,IAAIP,EACJ,MAAMJ,EAAKvB,KAAKS,WAAWD,MAC3B,QAAKe,IAGyC,QAA7CI,EAAK3B,KAAKS,WAAWuB,aAAaxB,aAA0B,IAAPmB,GAAyBA,EAAGQ,OAClFZ,EAAGC,MAAMC,QAAU,QACZ,EAAI,EAEfW,OAAQ,IACApC,KAAKS,WAAWa,SACTtB,KAAKS,WAAWyB,QAGhBlC,KAAKS,WAAWiB,OAG/BlB,IAAK,IACGR,KAAKS,WAAWC,GACT2B,SAASC,eAAetC,KAAKS,WAAWC,IAE5C,KAEXJ,IAAK,KACD,IAAIqB,EACJ,MAAMJ,EAAKvB,KAAKS,WAAWD,MAC3B,QAAKe,IAGLA,EAAGgB,UAAUC,IAAI,kBACjBjB,EAAGkB,UAAY,gKAIjBzC,KAAKS,WAAWG,SAASG,kEACoBf,KAAKS,WAAWG,SAASE,UAAUd,KAAKS,WAAWG,SAASE,iLAIvGd,KAAKS,WAAWG,SAASI,gIAK7BhB,KAAKS,WAAWE,SACP+B,KAAKC,IACN,MAAMC,EAAuB5C,KAAKS,WAAWY,UACzCrB,KAAK6C,SAASC,WACK,cAAnBH,EAAQI,OACNC,EAAUJ,EACV5C,KAAK6C,SAASC,UAAUG,SAASN,EAAQK,SACzCL,EAAQK,QACRE,EAAeN,EACf,GACA,wBACN,MAAO,yEAC8CD,EAAQI,OAAOI,gCACvD,SAAnBR,EAAQI,QAAwC,cAAnBJ,EAAQI,OACzB,oBAAoBJ,EAAQI,UAAUJ,EAAQK,mBAAmBE,MAAiBF,IAAUL,EAAQS,QAChGpD,KAAKqD,QAAQV,EAAQS,QACjB,kEAAkET,EAAQS,+CAA+CT,EAAQS,WAAWT,EAAQS,kBAExJ,YACe,sBAAnBT,EAAQI,OACJ/C,KAAKS,WAAWG,SAASM,OACzB,kBAAkByB,EAAQI,UAAUJ,EAAQK,YAAYhD,KAAKS,WAAWG,SAASC,8CAEpG,IAEUyC,KAAK,gaAUKtD,KAAKS,WAAWG,SAASO,sCACtCnB,KAAKS,WAAWW,oBAAsB,kBAAoB,iVAS1DpB,KAAKS,WAAWG,SAASK,yGAM3BjB,KAAKS,WAAW8C,eAAef,MAC/BxC,KAAKS,WAAWsB,iBAC8B,QAA7CJ,EAAK3B,KAAKS,WAAWuB,aAAaxB,aAA0B,IAAPmB,GAAyBA,EAAGM,SAC3E,EAAI,EAEfuB,WAAaC,IACTzD,KAAKS,WAAWE,SAAS+C,KAAKD,EAAY,EAE9CE,MAAO,KACH3D,KAAKS,WAAWE,SAAW,GAC3BX,KAAKS,WAAWH,KAAK,EAEzByB,eAAgB,KACZ,MAAMR,EAAKvB,KAAKS,WAAWmD,gBAAgBpD,MAC3C,IAAKe,EACD,OAAO,KAEXA,EAAGsC,UAAYtC,EAAGuC,YAAY,EAElCP,eAAgB,CACZQ,QAAS,KACL,MAAMxC,EAAKvB,KAAKS,WAAWD,MAC3B,IAAKe,EACD,OAEJ,MAAMyC,EAAchE,KAAKS,WAAWuD,YAAYxD,MAC5CwD,GACAA,EAAYC,oBAAoB,QAASjE,KAAKS,WAAWyB,OAE7D,MAAMgC,EAAclE,KAAKS,WAAWyD,YAAY1D,MAC5C0D,GACAA,EAAYD,oBAAoB,QAASjE,KAAKS,WAAWyD,YAAYC,UAEzE,MAAMnC,EAAehC,KAAKS,WAAWuB,aAAaxB,MAC9CwB,GACAA,EAAaiC,oBAAoB,UAAWjE,KAAKS,WAAWuB,aAAaoC,eAE7E,MAAMC,EAAgB9C,EAAG+C,iBAAiB,wCACtCD,GACAA,EAAcE,SAASC,IACnB,MAAMC,EAAaD,EAAOE,aAAa,sCACnCD,GAAczE,KAAKqD,QAAQoB,IAC3BD,EAAOP,oBAAoB,SAAS,KAChCjE,KAAKqD,QAAQoB,IAAa,GAEjC,GAER,EAELjC,IAAK,KACD,MAAMjB,EAAKvB,KAAKS,WAAWD,MAC3B,IAAKe,EACD,OAAO,KAEXvB,KAAKS,WAAW8C,eAAeQ,UAC/B,MAAMC,EAAchE,KAAKS,WAAWuD,YAAYxD,MAC5CwD,GACAA,EAAYW,iBAAiB,QAAS3E,KAAKS,WAAWyB,OAE1D,MAAMgC,EAAclE,KAAKS,WAAWyD,YAAY1D,MAC5C0D,GACAA,EAAYS,iBAAiB,SAAU3E,KAAKS,WAAWyD,YAAYC,UAEvE,MAAMnC,EAAehC,KAAKS,WAAWuB,aAAaxB,MAC9CwB,GACAA,EAAa2C,iBAAiB,UAAW3E,KAAKS,WAAWuB,aAAaoC,eAE1E,MAAMC,EAAgB9C,EAAG+C,iBAAiB,wCACtCD,GACAA,EAAcE,SAASC,IACnB,MAAMC,EAAaD,EAAOE,aAAa,sCACnCD,GAAczE,KAAKqD,QAAQoB,IAC3BD,EAAOG,iBAAiB,SAAS,KAC7B3E,KAAKqD,QAAQoB,IAAa,GAEjC,GAER,GAGTb,gBAAiB,CACbpD,IAAK,KACD,MAAMe,EAAKvB,KAAKS,WAAWD,MAC3B,OAAKe,EAGEA,EAAGqD,cAAc,4BAFb,IAEwC,GAG3DZ,YAAa,CACTxD,IAAK,KACD,MAAMe,EAAKvB,KAAKS,WAAWD,MAC3B,OAAKe,EAGEA,EAAGqD,cAAc,gCAFb,IAE4C,GAG/D5C,aAAc,CACVxB,IAAK,KACD,MAAMe,EAAKvB,KAAKS,WAAWD,MAC3B,OAAKe,EAGEA,EAAGqD,cAAc,+BAFb,IAE2C,EAE1DR,cAAgB7E,IACE,UAAVA,EAAEsF,MACFtF,EAAEuF,iBACF9E,KAAKS,WAAWyD,YAAYC,WAC/B,GAGTD,YAAa,CACT1D,IAAK,KACD,MAAMe,EAAKvB,KAAKS,WAAWD,MAC3B,OAAKe,EAGEA,EAAGqD,cAAc,8BAFb,IAE0C,EAEzDT,SAAU,KAEN,IADWnE,KAAKS,WAAWyD,YAAY1D,MAEnC,OAAO,KAEX,MAAMuE,EAAQ/E,KAAKS,WAAWuB,aAAaxB,MAC3C,OAAKuE,GAAUA,EAAM3F,MAAM4F,OAAOC,OAG9BjF,KAAKS,WAAWW,oBACT,UAEXpB,KAAK4B,IAAIsD,YAAYpD,IAAIiD,EAAM3F,OALpB,IAK0B,GAG7C+F,MAAO,CACHC,QAAS,KACL,MAAM7D,EAAKvB,KAAKS,WAAWD,MAC3B,QAAKe,IAGGA,EAAGgB,UAAU8C,SAAS,4BAA4B,EAE9DC,MAAO,KACH,MAAM/D,EAAKvB,KAAKS,WAAWD,MAC3B,IAAKe,EACD,OAAO,KAEXA,EAAGgB,UAAUgD,OAAO,4BAA4B,EAEpDC,KAAM,KACF,MAAMjE,EAAKvB,KAAKS,WAAWD,MAC3B,IAAKe,EACD,OAAO,KAEXA,EAAGgB,UAAUC,IAAI,4BAA4B,EAEjDJ,OAAQ,KACYpC,KAAKS,WAAW0E,MAAMC,UAElCpF,KAAKS,WAAW0E,MAAMK,OAGtBxF,KAAKS,WAAW0E,MAAMG,OACzB,IAIbtF,KAAKyF,kBAAqBC,GAAa/G,EAAUqB,UAAM,OAAQ,GAAQ,YACnE,MAAM2F,EAAeD,EAASE,SAASC,KACjCC,EAAOJ,EAASE,SAASG,UAC/B,GAAK/F,KAAKgG,eAAeL,GAIzB,IACI,MAAMM,EAAaC,KAAKC,MAAML,GACxBrG,QAAeO,KAAKgG,eAAeL,GAAcM,GACvD,GAAsB,iBAAXxG,EACPO,KAAK4B,IAAIsD,YAAYpD,IAAIrC,EAAQ,CAC7B2G,eAAgBV,EAAShF,SAG5B,IAAsB,kBAAXjB,EAMZ,MAAM,IAAI4G,MAAM,iDALhBrG,KAAK4B,IAAIsD,YAAYpD,IAAIrC,EAAO6G,WAAY,CACxCF,eAAgBV,EAAShF,IAKhC,CACJ,CACD,MAAOG,GACHb,KAAKuG,QAAQ1F,MAAMA,GACfA,aAAiBwF,MACjBrG,KAAK4B,IAAIsD,YAAYpD,IAAIjB,EAAM8B,QAAS,CACpCyD,eAAgBV,EAAShF,KAI7BV,KAAK4B,IAAIsD,YAAYpD,IAAI,mCAAoC,CACzDsE,eAAgBV,EAAShF,IAGpC,MAhCGV,KAAKuG,QAAQ1F,MAAM,uBAAyB8E,EAiC5D,IACQ3F,KAAK4B,IAAM,CACPsD,YAAa,CACTpD,IAAK,CAACa,EAAS5C,IAAYpB,EAAUqB,UAAM,OAAQ,GAAQ,YACvD,IAAK2C,EACD,MAAM,IAAI0D,MAAM,uBAEpBrG,KAAKS,WAAWW,qBAAsB,EACtCpB,KAAKS,WAAW+C,WAAW,CACvBT,OAAQ,OACRC,QAASL,EACT6D,KAAK,EACLC,UAAW,IAAIC,KACftD,OAAQ,OAEZpD,KAAKS,WAAW+C,WAAW,CACvBT,OAAQ,oBACRC,QAAS,GACTwD,KAAK,EACLC,UAAW,IAAIC,KACftD,OAAQ,OAEZpD,KAAKS,WAAWH,MAChB,MAAMqG,EAAO,CACThE,WAEA3C,KAAKG,aACLwG,EAAKxG,WAAaH,KAAKG,YAEvBH,KAAKS,WAAWY,UAAYrB,KAAK6C,SAASC,YAC1C6D,EAAKtF,UAAW,GAEpB,MAAMuF,EAAoBC,OAAOC,KAAK9G,KAAKqD,SACvCuD,EAAkB3B,SAClB0B,EAAKC,kBAAoBA,GAE7B,MAAMG,EAAsBF,OAAOC,KAAK9G,KAAKgG,gBACzCe,EAAoB9B,SACpB0B,EAAKI,oBAAsBA,GAE/B,MAAMC,QAAYhH,KAAK4B,IAAIsD,YAAY+B,QAAQtE,EAASgE,GAGxD,GAFA3G,KAAKS,WAAWW,qBAAsB,EACtCpB,KAAKS,WAAWE,SAASuG,OACpBF,IAAQA,EAAIG,OAASH,EAAIG,KAAKA,KAU/B,OATAnH,KAAKuG,QAAQ1F,MAAM,2BACnBb,KAAKS,WAAW+C,WAAW,CACvBT,OAAQ,QACRC,QAAShD,KAAKS,WAAWG,SAASC,MAClC2F,KAAK,EACLC,UAAW,IAAIC,KACftD,OAAQ,OAEZpD,KAAKS,WAAWH,MACT,KAEX,MAAM6G,EAAOH,EAAIG,KAuBjB,OAtBAnH,KAAKS,WAAW+C,WAAW,CACvBT,OAAQ,YACRC,QAASmE,EAAKA,KAAKC,iBACnBZ,KAAK,EACLC,UAAW,IAAIC,KACftD,OAAQ+D,EAAKA,KAAK/D,SAEtBpD,KAAKS,WAAWH,MACZ6G,EAAKA,KAAKhH,YAAcH,KAAKG,aAAegH,EAAKA,KAAKhH,aACtDH,KAAKG,WAAagH,EAAKA,KAAKhH,WAC5BH,KAAKK,aAAaC,IAAI,aAAcN,KAAKG,aAEzCgH,EAAKA,KAAK/D,QACVpD,KAAKqD,QAAQ8D,EAAKA,KAAK/D,SACvBpD,KAAKqH,gBACLrH,KAAKqD,QAAQ8D,EAAKA,KAAK/D,UAEvB+D,EAAKA,KAAKG,WAAaH,EAAKA,KAAKG,UAAUrC,OAAS,GACpDkC,EAAKA,KAAKG,UAAU/C,SAASmB,IACzB1F,KAAKyF,kBAAkBC,EAAS,IAGjCyB,EAAKA,IAChC,IACgBF,QAAS,CAACM,KAAcC,IAAW7I,EAAUqB,KAAM,CAACuH,KAAcC,QAAS,GAAQ,UAAW7E,EAASgE,EAAO,CAAA,GAC1G,aAAa3G,KAAKiH,QAAQ,CACtBQ,OAAQzH,KAAK4B,IAAIsD,YAAYuC,OAC7BC,IAAK1H,KAAK4B,IAAIsD,YAAYwC,IAC1Bf,OACAgB,iBAAkBhF,GAE1C,IACgB8E,OAAQ,OACRC,IAAK,IAET7F,YAAa,CACTC,IAAK,IAAMnD,EAAUqB,UAAM,OAAQ,GAAQ,YACvC,IAAKA,KAAKG,WACN,MAAO,GAEX,MAAM6G,QAAYhH,KAAK4B,IAAIC,YAAYoF,QAAQjH,KAAKG,YACpD,IAAK6G,IAAQA,EAAIG,OAASH,EAAIG,KAAKA,KAE/B,OADAnH,KAAKuG,QAAQ1F,MAAM,yCAAyCb,KAAKG,eAC1D,KAEX,MAAMgH,EAAOH,EAAIG,KAGjB,OAFAnH,KAAKS,WAAWE,SAAWwG,EAAKA,KAChCnH,KAAKS,WAAWH,MACT6G,EAAKA,IAChC,IACgBF,QAAU9G,GACCH,KAAKiH,QAAQ,CAChBQ,OAAQzH,KAAK4B,IAAIC,YAAY4F,OAC7BC,IAAK,GAAG1H,KAAK4B,IAAIC,YAAY6F,kBAAkBvH,IAC/CwH,iBAAkBxH,IAG1BsH,OAAQ,MACRC,IAAK,KAGb1H,KAAKqH,gBAAiB,EAItBrH,KAAKqD,QAAU,GAIfrD,KAAKgG,eAAiB,GACtBhG,KAAK4H,iBAAoBC,GAAWlJ,EAAUqB,UAAM,OAAQ,GAAQ,YAChE,OAAO,IAAIhB,SAASC,IAIhBA,EAHY6I,MAAMC,KAAK,IAAIC,WAAWH,IACjCnF,KAAKuF,GAASA,EAAK3B,SAAS,IAAI4B,SAAS,EAAG,OAC5C5E,KAAK,IACE,GAE5B,IACQtD,KAAKmI,kBAAqBC,GAAYzJ,EAAUqB,UAAM,OAAQ,GAAQ,YAClE,IAAKA,KAAKC,sBAEN,OADAD,KAAKuG,QAAQ1F,MAAM,sGACZ,KAEX,IACI,MAAMwH,EAAU,IAAIC,YACdC,EAAYF,EAAQG,OAAOxI,KAAKC,sBAAsBwI,iBACtDC,EAAgBL,EAAQG,OAAOJ,GAC/BvD,QAAY8D,OAAOC,OAAOC,UAAU,MAAON,EAAW,CAAE1C,KAAM,OAAQiD,KAAM,YAAa,EAAO,CAAC,SACjGC,QAAkBJ,OAAOC,OAAOI,KAAK,OAAQnE,EAAK6D,GACxD,aAAa1I,KAAK4H,iBAAiBmB,EACtC,CACD,MAAOlI,GAEH,OADAb,KAAKuG,QAAQ1F,MAAM,8BAA+BA,GAC3C,IACV,CACb,IACQb,KAAKiH,QAAWgC,GAAWtK,EAAUqB,UAAM,OAAQ,GAAQ,YACvD,IACI,IAAI0H,EAAMuB,EAAOvB,IACjB,MAAMwB,EAAUrC,OAAOsC,OAAO,CAAE,eAAgB,oBAAsBF,EAAOC,SACvEvC,EAAOE,OAAOsC,OAAO,CAAA,EAAIF,EAAOtC,MACtC,GAAI3G,KAAKC,uBACLD,KAAKC,sBAAsBwI,iBAC3BzI,KAAKC,sBAAsBmJ,WAC3BpJ,KAAKC,sBAAsB4E,KAC3BoE,EAAOtB,iBAAkB,CACzB,MAAMoB,QAAkB/I,KAAKmI,kBAAkBc,EAAOtB,kBACtD,IAAKoB,EACD,MAAM,IAAI1C,MAAM,gCAEpB,GAA6C,UAAzCrG,KAAKC,sBAAsBmJ,UAC3B1B,GAAO,IAAI1H,KAAKC,sBAAsB4E,OAAOkE,QAE5C,IAA6C,WAAzC/I,KAAKC,sBAAsBmJ,UAIhC,MAAM,IAAI/C,MAAM,mGAAmGrG,KAAKC,sBAAsBmJ,aAH9IF,EAAQlJ,KAAKC,sBAAsB4E,KAAOkE,CAI7C,CACJ,CACD,MAAM/B,QAAYqC,MAAM3B,EAAK,CACzBD,OAAQwB,EAAOxB,OACfyB,UACAvC,KAAM,CAAC,UAAW,OAAQ,MAAO,UAAU2C,SAASL,EAAOxB,aACrDvH,EACAgG,KAAKqD,UAAU5C,KAEnBQ,QAAaH,EAAIwC,OACvB,OAAO3C,OAAOsC,OAAOtC,OAAOsC,OAAO,CAAE,EAAEnC,GAAM,CAAEG,QAClD,CACD,MAAOtG,GAEH,OADAb,KAAKuG,QAAQ1F,MAAM,qBAAqBA,cAAkBoI,KACnD,IACV,CACb,IACQjJ,KAAKuG,QAAU,CACXkD,IAAK,IAAI3D,KACLS,QAAQkD,IAAI,kBAAmB3D,EAAK,EAExCjF,MAAO,IAAIiF,KACPS,QAAQ1F,MAAM,kBAAmBiF,EAAK,GAG9C9F,KAAKK,aAAe,CAChBC,IAAK,CAACuE,EAAKzF,KACPiB,aAAaqJ,QAAQ1J,KAAKqI,QAAQsB,OAAOnB,OAAO3D,GAAM7E,KAAKqI,QAAQsB,OAAOnB,OAAOtC,KAAKqD,UAAUnK,IAAQ,EAE5GoB,IAAMqE,IACF,MAAMzF,EAAQiB,aAAauJ,QAAQ5J,KAAKqI,QAAQsB,OAAOnB,OAAO3D,IAC9D,OAAKzF,EAGE8G,KAAKC,MAAMnG,KAAKqI,QAAQsB,OAAOE,OAAOzK,IAFlC,IAEyC,GAG5DY,KAAKqI,QAAU,CACXsB,OAAQ,CACJnB,OAASsB,GACEC,KAAKD,GAEhBD,OAASC,GACEE,KAAKF,KAIxB9J,KAAK6C,SAAW,CACZoH,KAAM,IACK,IAAIjL,SAAQ,CAACC,EAASC,KACzB,MAAMgL,EAAS7H,SAAS8H,cAAc,UACtCD,EAAOE,IACH,wEACJF,EAAOG,OAAS,KACZrK,KAAK6C,SAASC,UAAY,IAAIwH,OAAOzH,SAAS0H,UAC9CtL,EAAQqL,OAAOzH,SAAS,EAE5BqH,EAAOM,QAAU,IAAMtL,EAAO,IAAImH,MAAM,4BACxChE,SAASoI,KAAKC,YAAYR,EAAO,IAGzCpH,UAAW,MAEf9C,KAAK2K,WAAa,IACP,IAAI3L,SAASC,IACY,aAAxBoD,SAASuI,WACT3L,EAAQoD,UAGRA,SAASsC,iBAAiB,oBAAoB,KAC1C1F,EAAQoD,SAAS,GAExB,IAGJtC,EAAQW,GAIb,MAAO/B,EAAUqB,UAAM,OAAQ,GAAQ,kBAC7BA,KAAK2K,aACAtI,SAASC,eAAevC,EAAQW,KAKvCX,EAAQsB,WACRrB,KAAKS,WAAWY,UAAW,EAC3BrB,KAAK6C,SAASoH,QAElBjK,KAAKS,WAAWC,GAAKX,EAAQW,GACzBX,EAAQE,wBACRD,KAAKC,sBAAwBF,EAAQE,uBAErCF,EAAQ8K,YACJ9K,EAAQ8K,UAAU3F,cAClBlF,KAAK4B,IAAIsD,YAAYwC,IAAM3H,EAAQ8K,UAAU3F,YAAYwC,IACzD1H,KAAK4B,IAAIsD,YAAYuC,OAAS1H,EAAQ8K,UAAU3F,YAAYuC,QAE5D1H,EAAQ8K,UAAUhJ,cAClB7B,KAAK4B,IAAIC,YAAY6F,IAAM3H,EAAQ8K,UAAUhJ,YAAY6F,IACzD1H,KAAK4B,IAAIC,YAAY4F,OAAS1H,EAAQ8K,UAAUhJ,YAAY4F,SAGhE1H,EAAQI,YACJH,KAAKG,aAAeJ,EAAQI,WAC5BH,KAAKI,cAAcL,EAAQI,YAO/BH,KAAKO,gCAELP,KAAKG,YACLH,KAAK4B,IAAIC,YAAYC,MAErB/B,EAAQsD,UACRrD,KAAKqD,QAAUtD,EAAQsD,SAEvBtD,EAAQsH,iBACRrH,KAAKqH,eAAiBtH,EAAQsH,gBAE9BtH,EAAQiG,iBACRhG,KAAKgG,eAAiBjG,EAAQiG,gBAE9BjG,EAAQa,WACJb,EAAQa,SAASC,QACjBb,KAAKS,WAAWG,SAASC,MAAQd,EAAQa,SAASC,OAElDd,EAAQa,SAASE,QACjBd,KAAKS,WAAWG,SAASE,MAAQf,EAAQa,SAASE,OAElDf,EAAQa,SAASO,mBACjBnB,KAAKS,WAAWG,SAASO,iBACrBpB,EAAQa,SAASO,kBAErBpB,EAAQa,SAASG,OACjBf,KAAKS,WAAWG,SAASG,KAAOhB,EAAQa,SAASG,MAEjDhB,EAAQa,SAASI,YACjBhB,KAAKS,WAAWG,SAASI,UAAYjB,EAAQa,SAASI,WAEtDjB,EAAQa,SAASK,WACjBjB,KAAKS,WAAWG,SAASK,SAAWlB,EAAQa,SAASK,UAErDlB,EAAQa,SAASM,SACjBlB,KAAKS,WAAWG,SAASM,OAASnB,EAAQa,SAASM,SAGvDnB,EAAQ+K,WACR9K,KAAKS,WAAW0E,MAAMK,QArEtBxF,KAAKuG,QAAQ1F,MAAM,wBAAyBd,EAAQW,GAuE3D,GAAC,EA3EF,GAHIV,KAAKuG,QAAQ1F,MAAM,0BA+E1B,EAGiB,oBAAXyJ,SACPA,OAAOzK,YAAcA"}