{"version":3,"file":"index.js","sources":["index.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst ENDPOINTS = {\n    CHAT: \"https://www.navigable.ai/api/embed/v1/chat\",\n};\nclass NavigableAI {\n    constructor(options) {\n        this.sharedSecretKeyConfig = undefined;\n        this.elementId = \"navigableai-chat-window\";\n        this.embedId = undefined;\n        this.identifier = undefined;\n        this.setIdentifier = (identifier) => {\n            this.identifier = identifier;\n            this.localStorage.set(\"identifier\", identifier);\n        };\n        this.getIdentifierFromLocalStorage = () => {\n            const identifier = this.localStorage.get(\"identifier\");\n            if (identifier) {\n                this.identifier = identifier;\n            }\n        };\n        this.widget = {\n            enabled: true,\n            id: \"ai-chat-window-widget-button\",\n            position: \"bottom-right\",\n            get: () => {\n                if (this.widget.enabled && this.widget.id) {\n                    const el = document.getElementById(this.widget.id);\n                    if (el) {\n                        return el;\n                    }\n                }\n                return null;\n            },\n            set: (options) => {\n                const el = this.widget.get();\n                if (!el) {\n                    return null;\n                }\n                if (options === null || options === void 0 ? void 0 : options.position) {\n                    if (options.position === \"bottom-right\" ||\n                        options.position === \"bottom-left\") {\n                        this.widget.position = options.position;\n                    }\n                    else if (options.position === \"bottom-left\") {\n                        this.widget.position = \"bottom-left\";\n                    }\n                }\n                el.classList.remove(\"ai-chat-window-widget-button-bottom-left\", \"ai-chat-window-widget-button-bottom-right\");\n                el.classList.add(`ai-chat-window-widget-button-${this.widget.position}`);\n                el.removeEventListener(\"click\", () => this.chatWindow.toggle());\n                el.addEventListener(\"click\", () => this.chatWindow.toggle());\n            },\n        };\n        this.chatWindow = {\n            id: undefined,\n            messages: [],\n            defaults: {\n                error: \"An error occurred. Please try again later.\",\n                title: \"Assistant\",\n                logo: `<svg class=\"ai-chat-window-header-logo\" aria-hidden=\"true\"  xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-sparkles\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M16 18a2 2 0 0 1 2 2a2 2 0 0 1 2 -2a2 2 0 0 1 -2 -2a2 2 0 0 1 -2 2zm0 -12a2 2 0 0 1 2 2a2 2 0 0 1 2 -2a2 2 0 0 1 -2 -2a2 2 0 0 1 -2 2zm-7 12a6 6 0 0 1 6 -6a6 6 0 0 1 -6 -6a6 6 0 0 1 -6 6a6 6 0 0 1 6 6z\" /></svg>`,\n                closeIcon: `<svg class=\"ai-chat-window-header-close-icon\" xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-x\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M18 6l-12 12\" /><path d=\"M6 6l12 12\" /></svg>`,\n                sendIcon: `<svg class=\"ai-chat-window-input-send-icon\" xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"currentColor\"  class=\"icon icon-tabler icons-tabler-filled icon-tabler-circle-arrow-up\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M17 3.34a10 10 0 1 1 -14.995 8.984l-.005 -.324l.005 -.324a10 10 0 0 1 14.995 -8.336zm-4.98 3.66l-.163 .01l-.086 .016l-.142 .045l-.113 .054l-.07 .043l-.095 .071l-.058 .054l-4 4l-.083 .094a1 1 0 0 0 1.497 1.32l2.293 -2.293v5.586l.007 .117a1 1 0 0 0 1.993 -.117v-5.585l2.293 2.292l.094 .083a1 1 0 0 0 1.32 -1.497l-4 -4l-.082 -.073l-.089 -.064l-.113 -.062l-.081 -.034l-.113 -.034l-.112 -.02l-.098 -.006z\" /></svg>`,\n                loader: `<div class=\"ai-chat-window-loader\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>`,\n                inputPlaceholder: \"Type your message here...\",\n                widgetButton: `<button id=\"ai-chat-window-widget-button\" aria-label=\"Open assistant\">\r\n        <svg  xmlns=\"http://www.w3.org/2000/svg\"  width=\"40\"  height=\"40\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-message-bolt\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M8 9h8\" /><path d=\"M8 13h6\" /><path d=\"M13 18l-5 3v-3h-2a3 3 0 0 1 -3 -3v-8a3 3 0 0 1 3 -3h12a3 3 0 0 1 3 3v5.5\" /><path d=\"M19 16l-2 3h4l-2 3\" /></svg>\r\n      </button>`,\n            },\n            assistantResponding: false,\n            markdown: false,\n            isOpen: () => {\n                const el = this.chatWindow.get();\n                if (!el) {\n                    return false;\n                }\n                return el.style.display === \"block\";\n            },\n            open: (identifier) => {\n                var _a;\n                const el = this.chatWindow.get();\n                if (!el) {\n                    return false;\n                }\n                // Check and set identifier\n                if (identifier && this.identifier !== identifier) {\n                    this.identifier = identifier;\n                    this.api.getMessages.run();\n                }\n                this.chatWindow.set();\n                el.style.display = \"block\";\n                this.chatWindow.scrollToBottom();\n                (_a = this.chatWindow.messageInput.get()) === null || _a === void 0 ? void 0 : _a.focus();\n                return true;\n            },\n            close: () => {\n                var _a;\n                const el = this.chatWindow.get();\n                if (!el) {\n                    return false;\n                }\n                (_a = this.chatWindow.messageInput.get()) === null || _a === void 0 ? void 0 : _a.blur();\n                el.style.display = \"none\";\n                return true;\n            },\n            toggle: () => {\n                if (this.chatWindow.isOpen()) {\n                    return this.chatWindow.close();\n                }\n                else {\n                    return this.chatWindow.open();\n                }\n            },\n            get: () => {\n                if (this.chatWindow.id) {\n                    return document.getElementById(this.chatWindow.id);\n                }\n                return null;\n            },\n            set: () => {\n                var _a;\n                const el = this.chatWindow.get();\n                if (!el) {\n                    return false;\n                }\n                el.classList.add(\"ai-chat-window\");\n                el.innerHTML = `\r\n      <div class=\"ai-chat-window-container\">\r\n        <div class=\"ai-chat-window-header\">\r\n          <div class=\"ai-chat-window-header-left\">\r\n            ${this.chatWindow.defaults.logo}\r\n            <h2 class=\"ai-chat-window-title\" aria-label=\"${this.chatWindow.defaults.title}\">${this.chatWindow.defaults.title}</h2>\r\n          </div>\r\n          <div class=\"ai-chat-window-header-right\">\r\n            <button class=\"ai-chat-window-header-close\" aria-label=\"Close\">\r\n              ${this.chatWindow.defaults.closeIcon}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"ai-chat-window-messages\">\r\n          ${this.chatWindow.messages\n                    .map((message) => {\n                    const shouldRenderMarkdown = this.chatWindow.markdown &&\n                        this.showdown.converter &&\n                        message.sender === \"ASSISTANT\";\n                    const content = shouldRenderMarkdown\n                        ? this.showdown.converter.makeHtml(message.content)\n                        : message.content;\n                    const messageStyle = shouldRenderMarkdown\n                        ? \"\"\n                        : \"white-space: pre-wrap\";\n                    return `\r\n          <div class=\"ai-chat-window-message ${`ai-chat-window-message-${message.sender.toLowerCase()}`}\">\r\n            ${message.sender === \"USER\" || message.sender === \"ASSISTANT\"\n                        ? `<div aria-label=\"${message.sender} ${message.content}\" style=\"${messageStyle}\">${content}${message.action\n                            ? this.actions[message.action]\n                                ? `<br/><button class=\"ai-chat-window-message-action\" aria-label=\"${message.action}\" data-ai-chat-window-message-action=\"${message.action}\">${message.action}</button>`\n                                : \"\"\n                            : \"\"} </div>`\n                        : message.sender === \"ASSISTANT-LOADING\"\n                            ? this.chatWindow.defaults.loader\n                            : `<p aria-label=\"${message.sender} ${message.content}\">${this.chatWindow.defaults.error}</p>`}   \r\n          </div>\r\n          `;\n                })\n                    .join(\"\")}\r\n        </div>\r\n        <div class=\"ai-chat-window-input-section\">\r\n          <form id=\"ai-chat-window-input-form\">\r\n            <div class=\"ai-chat-window-input-section-container\">\r\n              <textarea \r\n                type=\"text\" \r\n                class=\"ai-chat-window-input-field\"\r\n                name=\"message\"\r\n                aria-label=\"Type your message here...\"\r\n                placeholder=\"${this.chatWindow.defaults.inputPlaceholder}\"\r\n                ${this.chatWindow.assistantResponding ? `disabled=\"true\"` : \"\"} \r\n                rows=\"1\"\r\n                oninput=\"this.style.height = 'auto'; this.style.height = this.scrollHeight + 'px';\"\r\n              ></textarea>\r\n              <button \r\n                class=\"ai-chat-window-input-send\"\r\n                aria-label=\"Send\"\r\n                type=\"submit\"\r\n              >\r\n                ${this.chatWindow.defaults.sendIcon}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>`;\n                this.chatWindow.eventListeners.add();\n                this.chatWindow.scrollToBottom();\n                (_a = this.chatWindow.messageInput.get()) === null || _a === void 0 ? void 0 : _a.focus();\n                return true;\n            },\n            addMessage: (messageData) => {\n                this.chatWindow.messages.push(messageData);\n            },\n            reset: () => {\n                this.chatWindow.messages = [];\n                this.chatWindow.set();\n            },\n            scrollToBottom: () => {\n                const el = this.chatWindow.messagesSection.get();\n                if (!el) {\n                    return null;\n                }\n                el.scrollTop = el.scrollHeight;\n            },\n            eventListeners: {\n                cleanup: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return;\n                    }\n                    const closeButton = this.chatWindow.closeButton.get();\n                    if (closeButton) {\n                        closeButton.removeEventListener(\"click\", this.chatWindow.close);\n                    }\n                    const messageForm = this.chatWindow.messageForm.get();\n                    if (messageForm) {\n                        messageForm.removeEventListener(\"click\", this.chatWindow.messageForm.onsubmit);\n                    }\n                    const messageInput = this.chatWindow.messageInput.get();\n                    if (messageInput) {\n                        messageInput.removeEventListener(\"keydown\", this.chatWindow.messageInput.submitOnEnter);\n                    }\n                    const actionButtons = el.querySelectorAll(\"[data-ai-chat-window-message-action]\");\n                    if (actionButtons) {\n                        actionButtons.forEach((button) => {\n                            const actionName = button.getAttribute(\"data-ai-chat-window-message-action\");\n                            if (actionName && this.actions[actionName]) {\n                                button.removeEventListener(\"click\", () => {\n                                    this.actionHandler(actionName);\n                                });\n                            }\n                        });\n                    }\n                },\n                add: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return null;\n                    }\n                    this.chatWindow.eventListeners.cleanup();\n                    const closeButton = this.chatWindow.closeButton.get();\n                    if (closeButton) {\n                        closeButton.addEventListener(\"click\", this.chatWindow.close);\n                    }\n                    const messageForm = this.chatWindow.messageForm.get();\n                    if (messageForm) {\n                        messageForm.addEventListener(\"submit\", this.chatWindow.messageForm.onsubmit);\n                    }\n                    const messageInput = this.chatWindow.messageInput.get();\n                    if (messageInput) {\n                        messageInput.addEventListener(\"keydown\", this.chatWindow.messageInput.submitOnEnter);\n                    }\n                    const actionButtons = el.querySelectorAll(\"[data-ai-chat-window-message-action]\");\n                    if (actionButtons) {\n                        actionButtons.forEach((button) => {\n                            const actionName = button.getAttribute(\"data-ai-chat-window-message-action\");\n                            if (actionName && this.actions[actionName]) {\n                                button.addEventListener(\"click\", () => {\n                                    this.actionHandler(actionName);\n                                });\n                            }\n                        });\n                    }\n                },\n            },\n            messagesSection: {\n                get: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return null;\n                    }\n                    return el.querySelector(\".ai-chat-window-messages\");\n                },\n            },\n            closeButton: {\n                get: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return null;\n                    }\n                    return el.querySelector(\".ai-chat-window-header-close\");\n                },\n            },\n            messageInput: {\n                get: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return null;\n                    }\n                    return el.querySelector(\".ai-chat-window-input-field\");\n                },\n                submitOnEnter: (e) => {\n                    if (e.key === \"Enter\") {\n                        e.preventDefault();\n                        this.chatWindow.messageForm.onsubmit();\n                    }\n                },\n            },\n            messageForm: {\n                get: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return null;\n                    }\n                    return el.querySelector(\"#ai-chat-window-input-form\");\n                },\n                onsubmit: () => {\n                    const el = this.chatWindow.messageForm.get();\n                    if (!el) {\n                        return null;\n                    }\n                    const input = this.chatWindow.messageInput.get();\n                    if (!input || !input.value.trim().length) {\n                        return null;\n                    }\n                    if (this.chatWindow.assistantResponding) {\n                        return null;\n                    }\n                    this.api.sendMessage.run(input.value);\n                },\n            },\n            theme: {\n                isLight: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return false;\n                    }\n                    return !el.classList.contains(\"ai-chat-window-dark-theme\");\n                },\n                light: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return null;\n                    }\n                    el.classList.remove(\"ai-chat-window-dark-theme\");\n                },\n                dark: () => {\n                    const el = this.chatWindow.get();\n                    if (!el) {\n                        return null;\n                    }\n                    el.classList.add(\"ai-chat-window-dark-theme\");\n                },\n                toggle: () => {\n                    const isLight = this.chatWindow.theme.isLight();\n                    if (isLight) {\n                        this.chatWindow.theme.dark();\n                    }\n                    else {\n                        this.chatWindow.theme.light();\n                    }\n                },\n            },\n        };\n        this.agentFunctionCall = (toolCall) => __awaiter(this, void 0, void 0, function* () {\n            const functionName = toolCall.function.name;\n            const args = toolCall.function.arguments;\n            try {\n                const parsedArgs = JSON.parse(args);\n                if (!this.agentFunctions[functionName] ||\n                    typeof this.agentFunctions[functionName] !== \"function\") {\n                    this.console.error(\"Function not found: \" + functionName);\n                    throw new Error(`Function ${functionName} must be a function`);\n                }\n                const result = yield this.agentFunctions[functionName](parsedArgs);\n                if (typeof result === \"string\") {\n                    this.api.sendMessage.run(result, {\n                        functionCallId: toolCall.id,\n                    });\n                }\n                else if (typeof result === \"boolean\") {\n                    this.api.sendMessage.run(result.toString(), {\n                        functionCallId: toolCall.id,\n                    });\n                }\n                else {\n                    throw new Error(\"Function Response must be a string or boolean\");\n                }\n            }\n            catch (error) {\n                this.console.error(error);\n                if (error instanceof Error) {\n                    this.api.sendMessage.run(error.message, {\n                        functionCallId: toolCall.id,\n                    });\n                }\n                else {\n                    this.api.sendMessage.run(\"Error: An unknown error occurred\", {\n                        functionCallId: toolCall.id,\n                    });\n                }\n            }\n        });\n        this.api = {\n            sendMessage: {\n                run: (message, options) => __awaiter(this, void 0, void 0, function* () {\n                    if (!message) {\n                        throw new Error(\"Message is required\");\n                    }\n                    this.chatWindow.assistantResponding = true;\n                    if (!(options === null || options === void 0 ? void 0 : options.functionCallId)) {\n                        this.chatWindow.addMessage({\n                            sender: \"USER\",\n                            content: message,\n                            new: false,\n                            createdAt: new Date(),\n                            action: null,\n                        });\n                    }\n                    this.chatWindow.addMessage({\n                        sender: \"ASSISTANT-LOADING\",\n                        content: \"\",\n                        new: false,\n                        createdAt: new Date(),\n                        action: null,\n                    });\n                    this.chatWindow.set();\n                    const body = {\n                        message,\n                    };\n                    if (this.identifier) {\n                        body.identifier = this.identifier;\n                    }\n                    if (this.chatWindow.markdown && this.showdown.converter) {\n                        body.markdown = true;\n                    }\n                    const configuredActions = Object.keys(this.actions);\n                    if (configuredActions.length) {\n                        body.configuredActions = configuredActions;\n                    }\n                    const configuredFunctions = Object.keys(this.agentFunctions);\n                    if (configuredFunctions.length) {\n                        body.configuredFunctions = configuredFunctions;\n                    }\n                    if (options === null || options === void 0 ? void 0 : options.functionCallId) {\n                        body.functionCallId = options.functionCallId;\n                    }\n                    const res = yield this.api.sendMessage.request(message, body);\n                    this.chatWindow.assistantResponding = false;\n                    this.chatWindow.messages.pop();\n                    if (!res || !res.data || !res.data.data) {\n                        this.console.error(\"Failed to send message.\");\n                        this.chatWindow.addMessage({\n                            sender: \"ERROR\",\n                            content: this.chatWindow.defaults.error,\n                            new: false,\n                            createdAt: new Date(),\n                            action: null,\n                        });\n                        this.chatWindow.set();\n                        return null;\n                    }\n                    const data = res.data;\n                    this.chatWindow.addMessage({\n                        sender: \"ASSISTANT\",\n                        content: data.data.assistantMessage,\n                        new: false,\n                        createdAt: new Date(),\n                        action: data.data.action,\n                    });\n                    this.chatWindow.set();\n                    if (data.data.identifier && this.identifier !== data.data.identifier) {\n                        this.identifier = data.data.identifier;\n                        this.localStorage.set(\"identifier\", this.identifier);\n                    }\n                    if (data.data.action &&\n                        this.actions[data.data.action] &&\n                        this.autoRunActions) {\n                        this.actionHandler();\n                    }\n                    if (data.data.toolCalls && data.data.toolCalls.length > 0) {\n                        data.data.toolCalls.forEach((toolCall) => {\n                            this.agentFunctionCall(toolCall);\n                        });\n                    }\n                    return data.data;\n                }),\n                request: (message_1, ...args_1) => __awaiter(this, [message_1, ...args_1], void 0, function* (message, body = {}) {\n                    return yield this.request({\n                        method: this.api.sendMessage.method,\n                        url: this.api.sendMessage.url,\n                        body,\n                        signaturePayload: message,\n                        headers: {\n                            \"x-embed-id\": this.embedId || \"\",\n                        },\n                    });\n                }),\n                method: \"POST\",\n                url: ENDPOINTS.CHAT,\n            },\n            getMessages: {\n                run: () => __awaiter(this, void 0, void 0, function* () {\n                    if (!this.identifier) {\n                        return [];\n                    }\n                    const res = yield this.api.getMessages.request(this.identifier);\n                    if (!res || !res.data || !res.data.data) {\n                        this.console.error(`Failed to get messages for identifier ${this.identifier}.`);\n                        return null;\n                    }\n                    const data = res.data;\n                    if (this.chatWindow.messages.length === 0) {\n                        this.chatWindow.messages = data.data;\n                    }\n                    else if (this.chatWindow.messages.length === 2) {\n                        this.chatWindow.messages = [\n                            ...this.chatWindow.messages,\n                            ...data.data,\n                        ];\n                    }\n                    else {\n                        this.chatWindow.messages = data.data;\n                    }\n                    this.chatWindow.set();\n                    return data.data;\n                }),\n                request: (identifier) => {\n                    return this.request({\n                        method: this.api.getMessages.method,\n                        url: `${this.api.getMessages.url}?identifier=${identifier}`,\n                        signaturePayload: identifier,\n                        headers: {\n                            \"x-embed-id\": this.embedId || \"\",\n                        },\n                    });\n                },\n                method: \"GET\",\n                url: ENDPOINTS.CHAT,\n            },\n        };\n        this.goTo = (path) => {\n            this.console.log(\"Navigating to:\", path);\n            if (!window || typeof window === \"undefined\") {\n                return;\n            }\n            window.location.href = path;\n        };\n        /**\n         * Action handler for the assistant.\n         */\n        this.actionHandler = (action) => {\n            if (!action) {\n                return;\n            }\n            const handler = this.actions[action];\n            this.console.log(\"Running action:\", action, handler);\n            if (typeof handler === \"string\") {\n                this.goTo(handler);\n            }\n            else if (typeof handler === \"function\") {\n                handler();\n            }\n        };\n        this.autoRunActions = false;\n        /**\n         * Navigation actions to be suggested by the assistant.\n         */\n        this.actions = {};\n        /**\n         * Functions that can be automated through the assistant. The function should return a string with a status message or simply true for success and false for error.\n         */\n        this.agentFunctions = {};\n        this.arrayBufferToHex = (buffer) => __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => {\n                const hex = Array.from(new Uint8Array(buffer))\n                    .map((byte) => byte.toString(16).padStart(2, \"0\"))\n                    .join(\"\");\n                resolve(hex);\n            });\n        });\n        this.generateSignature = (payload) => __awaiter(this, void 0, void 0, function* () {\n            if (!this.sharedSecretKeyConfig) {\n                this.console.error(\"sharedSecretKeyConfig is not set. Please set sharedSecretKeyConfig while initializing NavigableAI.\");\n                return null;\n            }\n            try {\n                const encoder = new TextEncoder();\n                const keyBuffer = encoder.encode(this.sharedSecretKeyConfig.sharedSecretKey);\n                const payloadBuffer = encoder.encode(payload);\n                const key = yield crypto.subtle.importKey(\"raw\", keyBuffer, { name: \"HMAC\", hash: \"SHA-256\" }, false, [\"sign\"]);\n                const signature = yield crypto.subtle.sign(\"HMAC\", key, payloadBuffer);\n                return yield this.arrayBufferToHex(signature);\n            }\n            catch (error) {\n                this.console.error(\"Error generating signature:\", error);\n                return null;\n            }\n        });\n        this.request = (config) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                let url = config.url;\n                const headers = Object.assign({ \"Content-Type\": \"application/json\" }, config.headers);\n                const body = Object.assign({}, config.body);\n                if (this.sharedSecretKeyConfig &&\n                    this.sharedSecretKeyConfig.sharedSecretKey &&\n                    this.sharedSecretKeyConfig.placement &&\n                    this.sharedSecretKeyConfig.key &&\n                    config.signaturePayload) {\n                    const signature = yield this.generateSignature(config.signaturePayload);\n                    if (!signature) {\n                        throw new Error(\"Failed to generate signature\");\n                    }\n                    if (this.sharedSecretKeyConfig.placement === \"query\") {\n                        url += `?${this.sharedSecretKeyConfig.key}=${signature}`;\n                    }\n                    else if (this.sharedSecretKeyConfig.placement === \"header\") {\n                        headers[this.sharedSecretKeyConfig.key] = signature;\n                    }\n                    else {\n                        throw new Error(`Invalid placement for shared secret key. Placement must be 'query', 'header', or 'body'. Found: ${this.sharedSecretKeyConfig.placement}`);\n                    }\n                }\n                const res = yield fetch(url, {\n                    method: config.method,\n                    headers,\n                    body: [\"OPTIONS\", \"HEAD\", \"GET\", \"DELETE\"].includes(config.method)\n                        ? undefined\n                        : JSON.stringify(body),\n                });\n                const data = yield res.json();\n                return Object.assign(Object.assign({}, res), { data });\n            }\n            catch (error) {\n                this.console.error(`Error in request: ${error}\\nConfig: ${config}`);\n                return null;\n            }\n        });\n        this.console = {\n            log: (...args) => {\n                console.log(\"NavigableAI:\", ...args);\n            },\n            error: (...args) => {\n                console.error(\"NavigableAI:\", ...args);\n            },\n        };\n        this.localStorage = {\n            set: (key, value) => {\n                localStorage.setItem(this.encoder.base64.encode(key), this.encoder.base64.encode(JSON.stringify(value)));\n            },\n            get: (key) => {\n                const value = localStorage.getItem(this.encoder.base64.encode(key));\n                if (!value) {\n                    return null;\n                }\n                return JSON.parse(this.encoder.base64.decode(value));\n            },\n        };\n        this.encoder = {\n            base64: {\n                encode: (str) => {\n                    return btoa(str);\n                },\n                decode: (str) => {\n                    return atob(str);\n                },\n            },\n        };\n        this.showdown = {\n            load: () => {\n                return new Promise((resolve, reject) => {\n                    const script = document.createElement(\"script\");\n                    script.src =\n                        \"https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js\";\n                    script.onload = () => {\n                        this.showdown.converter = new window.showdown.Converter();\n                        resolve(window.showdown);\n                    };\n                    script.onerror = () => reject(new Error(\"Failed to load Showdown\"));\n                    document.head.appendChild(script);\n                });\n            },\n            converter: null,\n        };\n        this.waitForDOM = () => {\n            return new Promise((resolve) => {\n                if (document.readyState === \"complete\") {\n                    resolve(document);\n                }\n                else {\n                    document.addEventListener(\"DOMContentLoaded\", () => {\n                        resolve(document);\n                    });\n                }\n            });\n        };\n        if (options.id) {\n            const targetElement = document.getElementById(options.id);\n            if (targetElement) {\n                this.elementId = options.id;\n            }\n        }\n        (() => __awaiter(this, void 0, void 0, function* () {\n            yield this.waitForDOM();\n            const el = document.getElementById(this.elementId);\n            if (!el) {\n                this.console.error(\"div not found with id\", this.elementId);\n                return;\n            }\n            if (options.embedId) {\n                this.embedId = options.embedId;\n            }\n            if (options.markdown) {\n                this.chatWindow.markdown = true;\n                this.showdown.load();\n            }\n            this.chatWindow.id = this.elementId;\n            if (options.sharedSecretKeyConfig) {\n                this.sharedSecretKeyConfig = options.sharedSecretKeyConfig;\n            }\n            if (options.apiConfig) {\n                if (options.apiConfig.sendMessage) {\n                    this.api.sendMessage.url = options.apiConfig.sendMessage.url;\n                    this.api.sendMessage.method = options.apiConfig.sendMessage.method;\n                }\n                if (options.apiConfig.getMessages) {\n                    this.api.getMessages.url = options.apiConfig.getMessages.url;\n                    this.api.getMessages.method = options.apiConfig.getMessages.method;\n                }\n            }\n            if (options.identifier) {\n                if (this.identifier !== options.identifier) {\n                    this.setIdentifier(options.identifier);\n                }\n                else {\n                    this.getIdentifierFromLocalStorage();\n                }\n            }\n            else {\n                this.getIdentifierFromLocalStorage();\n            }\n            if (this.identifier) {\n                this.api.getMessages.run();\n            }\n            if (options.actions) {\n                this.actions = options.actions;\n            }\n            if (options.autoRunActions) {\n                this.autoRunActions = options.autoRunActions;\n            }\n            if (options.agentFunctions) {\n                this.agentFunctions = options.agentFunctions;\n            }\n            if (options.defaults) {\n                if (options.defaults.error) {\n                    this.chatWindow.defaults.error = options.defaults.error;\n                }\n                if (options.defaults.title) {\n                    this.chatWindow.defaults.title = options.defaults.title;\n                }\n                if (options.defaults.inputPlaceholder) {\n                    this.chatWindow.defaults.inputPlaceholder =\n                        options.defaults.inputPlaceholder;\n                }\n                if (options.defaults.logo) {\n                    this.chatWindow.defaults.logo = options.defaults.logo;\n                }\n                if (options.defaults.closeIcon) {\n                    this.chatWindow.defaults.closeIcon = options.defaults.closeIcon;\n                }\n                if (options.defaults.sendIcon) {\n                    this.chatWindow.defaults.sendIcon = options.defaults.sendIcon;\n                }\n                if (options.defaults.loader) {\n                    this.chatWindow.defaults.loader = options.defaults.loader;\n                }\n                if (options.defaults.widgetButton) {\n                    this.chatWindow.defaults.widgetButton = options.defaults.widgetButton;\n                }\n            }\n            if (options.darkTheme) {\n                this.chatWindow.theme.dark();\n            }\n            if (options.widgetButtonDisabled) {\n                this.widget.enabled = false;\n            }\n            else {\n                document.body.innerHTML =\n                    document.body.innerHTML + this.chatWindow.defaults.widgetButton;\n            }\n            if (options.widgetButtonPosition) {\n                if (options.widgetButtonPosition === \"bottom-right\" ||\n                    options.widgetButtonPosition === \"bottom-left\") {\n                    this.widget.position = options.widgetButtonPosition;\n                }\n            }\n            if (this.widget.enabled) {\n                this.widget.set();\n            }\n        }))();\n    }\n}\nexport { NavigableAI };\nif (typeof window !== \"undefined\") {\n    window.NavigableAI = NavigableAI;\n    const windowElement = document.createElement(\"div\");\n    windowElement.id = \"navigableai-chat-window\";\n    document.body.appendChild(windowElement);\n}\n"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","ENDPOINTS","NavigableAI","constructor","options","this","sharedSecretKeyConfig","undefined","elementId","embedId","identifier","setIdentifier","localStorage","set","getIdentifierFromLocalStorage","get","widget","enabled","id","position","el","document","getElementById","classList","remove","add","removeEventListener","chatWindow","toggle","addEventListener","messages","defaults","error","title","logo","closeIcon","sendIcon","loader","inputPlaceholder","widgetButton","assistantResponding","markdown","isOpen","style","display","open","_a","api","getMessages","run","scrollToBottom","messageInput","focus","close","blur","innerHTML","map","message","shouldRenderMarkdown","showdown","converter","sender","content","makeHtml","messageStyle","toLowerCase","action","actions","join","eventListeners","addMessage","messageData","push","reset","messagesSection","scrollTop","scrollHeight","cleanup","closeButton","messageForm","onsubmit","submitOnEnter","actionButtons","querySelectorAll","forEach","button","actionName","getAttribute","actionHandler","querySelector","key","preventDefault","input","trim","length","sendMessage","theme","isLight","contains","light","dark","agentFunctionCall","toolCall","functionName","function","name","args","arguments","parsedArgs","JSON","parse","agentFunctions","console","Error","functionCallId","toString","new","createdAt","Date","body","configuredActions","Object","keys","configuredFunctions","res","request","pop","data","assistantMessage","autoRunActions","toolCalls","message_1","args_1","method","url","signaturePayload","headers","goTo","path","log","window","location","href","handler","arrayBufferToHex","buffer","Array","from","Uint8Array","byte","padStart","generateSignature","payload","encoder","TextEncoder","keyBuffer","encode","sharedSecretKey","payloadBuffer","crypto","subtle","importKey","hash","signature","sign","config","assign","placement","fetch","includes","stringify","json","setItem","base64","getItem","decode","str","btoa","atob","load","script","createElement","src","onload","Converter","onerror","head","appendChild","waitForDOM","readyState","apiConfig","darkTheme","widgetButtonDisabled","widgetButtonPosition","windowElement"],"mappings":"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"}